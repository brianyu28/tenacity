{"version":3,"sources":["game/blocks.js","components/ControlPanel.js","assets/rocket.svg","assets/rover.svg","game/constants.js","game/objects.js","game/missions.js","analytics.js","components/GameIntro.js","components/Ground.js","components/PlanetIntro.js","components/ProgressIndicator.js","components/Level.js","components/Item.js","components/MissionObjective.js","components/MissionBriefing.js","components/Scene.js","assets/amerika.mp3","components/Page.js","App.js","reportWebVitals.js","index.js"],"names":["BLOCK_NAMES","BLOCKS","name","remaining_blocks","blocks","program","counts","i","length","block","undefined","reduce","acc","count","addToProgram","onResetProgram","onSubmitProgram","programSubmitted","id","map","instruction","onClick","window","scrollTo","top","behavior","setTimeout","className","blockClicked","CANVAS_WIDTH","CANVAS_HEIGHT","GROUND_HEIGHT","OBJECTS","ROVER","image","rover","height","width","ROCKET","rocket","PLANETS","introConfig","size","scale","orbitDuration","textColor","colors","main","sky","text","briefing","missions","objective","items","object","x","criteria","category","value","ReactGA","initialize","getMissionLabel","planetIndex","missionIndex","logEvent","event","onCompleteIntro","onStartPlaying","useState","start","setStart","titleSpring","useSpring","to","opacity","from","config","duration","onRest","completeIntro","g","y","dominantBaseline","textAnchor","rx","fill","style","fontSize","planet","Array","keys","TICK_WIDTH","onZoomIntro","resetOrbit","setResetOrbit","exitIntro","setExitIntro","planetZoom","setPlanetZoom","planetText","setPlanetText","sunSpring","delay","planetOpacitySpring","planetMotionSpring","angle","Math","PI","reset","state","sceneExitSpring","planetTextSpring","renderedPlanets","slice","isLastPlanet","planetGrowthSpring","r","radius","circle","cx","cy","fillOpacity","stroke","strokeWidth","interpolate","theta","cos","sin","useEffect","timer","clearTimeout","completedMissions","mission","PADDING","AItem","a","center","href","currentInstruction","onSuccess","onFailure","setCurrentInstruction","action","label","Date","startTime","instructionsCompleted","setInstructionsCompleted","setItems","winMessage","setWinMessage","loseMessage","setLoseMessage","checkCriteria","criterion","console","log","prev","winSpring","round","loseSpring","Object","itemName","item","itemSpring","elevation","checkWin","e","obj_y","missionNumber","textAlign","onCompleteBriefing","ACTION","HANDLER","introShown","planetIntroStatus","PLANET_INTRO_STATUS","NOT_SHOWN","ZOOMING","COMPLETE","briefingShown","planetIntroShown","done","reducer","type","payload","handler","props","development","useReducer","dispatch","act","handleCompleteIntro","handleZoomPlanetIntro","handleCompletePlanetIntro","handleCompleteBriefing","backgroundColorSpring","color","levelInProgress","showControlPanel","maxWidth","svg","backgroundColor","Ground","ProgressIndicator","Level","PlanetIntro","MissionObjective","MissionBriefing","ControlPanel","ASound","Sound","Page","playing","setPlaying","audioSpring","volume","Scene","url","backgroundMusic","playStatus","status","PLAYING","STOPPED","autoLoad","loop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","pageview","location","pathname","search","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.46e5a5ea.chunk.js","sourcesContent":["// Blocks available for usage\n\nexport const BLOCK_NAMES = {\n  FORWARD: 'FORWARD'\n}\n\nexport const BLOCKS = {\n\n  [BLOCK_NAMES.FORWARD]: {\n    name: 'Move Forward'\n  }\n\n}\n\nexport const remaining_blocks = (blocks, program) => {\n\n  // Count up how many times each block is currently used in the program\n  const counts = {};\n  for (let i = 0; i < program.length; i++) {\n    const block = program[i];\n    if (counts[block] === undefined) {\n      counts[block] = 1;\n    } else {\n      counts[block]++;\n    }\n  }\n\n  // Remove\n  return blocks.reduce((acc, [block, count]) => (\n    [...acc, [block, count - (counts[block] || 0)]]\n  ), []);\n}","import { BLOCKS } from '../game/blocks';\n\nexport default ({ addToProgram, blocks, onResetProgram, onSubmitProgram,\n                  program, programSubmitted }) => {\n\n  function blockClicked(block) {\n    if (!programSubmitted) {\n      addToProgram(block);\n    }\n  }\n\n  function submitProgram() {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n    setTimeout(onSubmitProgram, 1000);\n  }\n\n  return (\n    <div id='control-panel'>\n      <div id='control-panel-container'>\n        <div>\n          <div id='program'>\n            {program.map((instruction, i) => {\n              return <div key={i}>\n                {BLOCKS[instruction].name}\n              </div>\n            })}\n          </div>\n          {!programSubmitted &&\n          <div>\n            <button onClick={onResetProgram}>Reset</button>\n            <button onClick={submitProgram}>Submit Instructions</button>\n          </div>\n          }\n        </div>\n        <div id='blocks'>\n          {blocks.map(([block, count], i) => {\n            if (count == 0)\n              return;\n            return <button\n              className='block'\n              key={i}\n              onClick={() => blockClicked(block)}\n            >\n              {BLOCKS[block].name} (x{count})\n            </button>\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}","export default __webpack_public_path__ + \"static/media/rocket.0dec99f9.svg\";","export default __webpack_public_path__ + \"static/media/rover.b107911f.svg\";","// Game dimensions\nexport const CANVAS_WIDTH = 800;\nexport const CANVAS_HEIGHT = 600;\nexport const GROUND_HEIGHT = 100;\n","import rocket from '../assets/rocket.svg';\nimport rover from '../assets/rover.svg';\n\nimport { CANVAS_HEIGHT, GROUND_HEIGHT } from './constants';\n\nexport const OBJECTS = {\n  ROVER: {\n    image: rover,\n    height: 80,\n    width: 80\n  },\n  ROCKET: {\n    image: rocket,\n    height: 100,\n    width: 57\n  }\n}\n\n// Get y position of object based on its elevation off the ground\nexport const obj_y = (object, elevation = 0) => (\n  CANVAS_HEIGHT - GROUND_HEIGHT - object.height - elevation \n)","// Game is divided into Planets and Missions\n\nimport { BLOCK_NAMES } from './blocks';\nimport { OBJECTS } from './objects';\n\nexport const PLANETS = [\n  {\n    name: 'Mercury',\n    introConfig: {\n      size: 15,\n      scale: 2,\n      orbitDuration: 10000,\n      textColor: 'black'\n    },\n    colors: {\n      main: '#ae7c43',\n      sky: '#dbb78f',\n      text: 'black'\n    },\n    briefing: 'The Tenacity rover has arrived on Mercury. Use the control panel to help Tenacity complete its missions.',\n    missions: [\n      {\n        objective: 'Navigate Tenacity back to the spacecraft for refueling.',\n        blocks: [\n          [BLOCK_NAMES.FORWARD, 2]\n        ],\n        items: {\n          'rocket': {object: OBJECTS.ROCKET, x: 500},\n          'rover': {object: OBJECTS.ROVER, x: 300},\n        },\n        criteria: [\n          {category: 'rover_x', value: 500}\n        ]\n      },\n      {\n        objective: 'This Mission has yet to be created. Check back soon!',\n        blocks: [],\n        items: {},\n        criteria: []\n      }\n    ]\n  },\n  {\n    name: 'Venus'\n  }\n]","import ReactGA from 'react-ga';\n\nimport { PLANETS } from './game/missions.js';\n\nReactGA.initialize('UA-123778931-5');\n\nconst logAnalytics = process.env.NODE_ENV != 'development';\n\nexport const getMissionLabel = (planetIndex, missionIndex) => {\n  return `${PLANETS[planetIndex].name}, Mission ${missionIndex + 1}`;\n}\n\nexport const logPageview = () => {\n  if (logAnalytics) {\n    ReactGA.pageview(window.location.pathname + window.location.search);\n  }\n}\n\nexport const logEvent = (event) => {\n  if (logAnalytics) {\n    ReactGA.event(event);\n  }\n}","import { useState } from 'react';\nimport { useSpring, animated as a } from 'react-spring';\n\nimport { logEvent } from '../analytics';\nimport { CANVAS_HEIGHT, CANVAS_WIDTH } from '../game/constants';\nimport '../css/GameIntro.css';\n\nconst BUTTON_WIDTH = 200;\nconst BUTTON_HEIGHT = 80;\n\nexport default ({ onCompleteIntro, onStartPlaying }) => {\n\n  // State to keep track of whether play button has been clicked\n  const [start, setStart] = useState(false);\n\n  // Fade in and fade out for titles\n  const titleSpring = useSpring({\n    to: {opacity: start ? 0 : 1},\n    from: {opacity: 0},\n    config: {duration: 1500},\n    onRest: () => {\n      if (start)\n        onCompleteIntro();\n    }\n  });\n\n  // Start playing music and begin game\n  const completeIntro = () => {\n    logEvent({\n      'category': 'Game',\n      'action': 'Play Game'\n    });\n    onStartPlaying();\n    setStart(true);\n  };\n\n  return (\n    <a.g opacity={titleSpring.opacity}>\n\n      {/* Main title */}\n      <text\n        x='50%'\n        y='30%'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        className='titleText'\n        opacity={titleSpring.opacity}\n      >\n        Tenacity\n      </text>\n\n      {/* Subtitle */}\n      <text\n        x='50%'\n        y='45%'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        className='subheadText'\n        opacity={titleSpring.opacity}\n      >\n        A game by Brian Yu\n      </text>\n\n      {/* Play button */}\n      <rect\n        x={(CANVAS_WIDTH - BUTTON_WIDTH) / 2}\n        y='360'\n        height={BUTTON_HEIGHT}\n        width={BUTTON_WIDTH}\n        rx={20}\n        fill='white'\n        className='hoverable'\n        onClick={completeIntro}\n      />\n      <text\n        x={CANVAS_WIDTH / 2}\n        y='400'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        style={{ fontSize: '48px', fill: 'black' }}\n        className='hoverable'\n        onClick={completeIntro}\n      >\n        Play\n      </text>\n\n    </a.g>\n  );\n}","import { CANVAS_HEIGHT, CANVAS_WIDTH, GROUND_HEIGHT } from '../game/constants';\n\nconst SHOW_TICKS = true;\nconst TICK_INTERVAL = 100;\nconst TICK_WIDTH = 1;\nconst TICK_HEIGHT = 10;\n\nexport default ({ planet }) => {\n  return (\n    <g>\n      <rect\n        x={0} y={CANVAS_HEIGHT - GROUND_HEIGHT} width={CANVAS_WIDTH} height={GROUND_HEIGHT}\n        fill={planet.colors.main}\n      />\n      {SHOW_TICKS && [...Array(CANVAS_WIDTH / TICK_INTERVAL).keys()].map(i => {\n        return <rect\n          key={i}\n          x={i * TICK_INTERVAL - (TICK_WIDTH / 2)}\n          y={CANVAS_HEIGHT - GROUND_HEIGHT}\n          width={TICK_WIDTH}\n          height={TICK_HEIGHT}\n        />\n      })}\n    </g>\n  );\n}","import { useState, useEffect } from 'react';\nimport { useSpring, animated as a } from 'react-spring';\n\nimport { CANVAS_HEIGHT, CANVAS_WIDTH } from '../game/constants';\nimport { PLANETS } from '../game/missions';\n\nconst START_RADIUS = 100;\nconst RADIUS_INCREMENT = 20;\n\nexport default ({ onCompleteIntro, onZoomIntro, planetIndex }) => {\n\n  // Determine current planet and scale\n  const planet = PLANETS[planetIndex];\n  const scale = planet.introConfig.scale;\n\n  // State to keep track of stage in animation\n  const [resetOrbit, setResetOrbit] = useState(false);\n  const [exitIntro, setExitIntro] = useState(false);\n  const [planetZoom, setPlanetZoom] = useState(false);\n  const [planetText, setPlanetText] = useState(false);\n\n  // Fade in for sun\n  const sunSpring = useSpring({\n    to: {opacity: 1},\n    from: {opacity: 0},\n    config: {duration: 1500},\n    delay: 1500,\n  });\n\n  // Fade in for planets\n  const planetOpacitySpring = useSpring({\n    to: {opacity: 1},\n    from: {opacity: 0},\n    config: {duration: 1500},\n    delay: 3000\n  })\n\n  // Angle for planets' orbit\n  const planetMotionSpring = useSpring({\n    to: {angle: 2 * Math.PI},\n    from: {angle: 0},\n    config: {duration: 10000},\n    reset: resetOrbit,\n    onRest: () => setResetOrbit(state => !state)\n  });\n\n  // Fade out for scene\n  const sceneExitSpring = useSpring({\n    to: {opacity: exitIntro ? 0: 1},\n    from: {opacity: 1},\n    config: {duration: 2000},\n    onRest: () => {\n      if (exitIntro) {\n        onCompleteIntro();\n      }\n    }\n  });\n\n  // Fade in for planet text\n  const planetTextSpring = useSpring({\n    to: {opacity: planetText ? 1: 0},\n    from: {opacity: 0},\n    config: {duration: 1000},\n    onRest: () => {\n      if (planetText) {\n        setTimeout(() => {\n          setExitIntro(true);\n        }, 2000);\n      }\n    }\n  })\n\n  // Generate orbit and planet for each visible planet\n  const renderedPlanets = PLANETS.slice(0, 1 + planetIndex).map((planet, i) => {\n\n    const isLastPlanet = i == planetIndex;\n\n    let planetGrowthSpring = undefined;\n    if (isLastPlanet) {\n      planetGrowthSpring = useSpring({\n        to: {r: planetZoom ? 1600 : planet.introConfig.size * scale},\n        from: {r: planet.introConfig.size * scale},\n        config: {duration: 1000},\n        onRest: () => {\n          if (planetZoom) {\n            onZoomIntro();\n            setPlanetText(true);\n          }\n        }\n      });\n    }\n\n    const radius = START_RADIUS + RADIUS_INCREMENT * i;\n    return <a.g key={i} opacity={planetOpacitySpring.opacity}>\n      <a.circle\n        cx={CANVAS_WIDTH / 2}\n        cy={CANVAS_HEIGHT / 2}\n        r={radius * scale}\n        fillOpacity={0}\n        stroke={'white'}\n        strokeWidth={2}\n      />\n      <a.circle\n        cx={planetMotionSpring.angle.interpolate(theta => (CANVAS_WIDTH / 2) + scale * (radius * Math.cos(theta)))}\n        cy={planetMotionSpring.angle.interpolate(theta => (CANVAS_HEIGHT / 2) - scale * (radius * Math.sin(theta)))}\n        r={isLastPlanet ? planetGrowthSpring.r : planet.introConfig.size * scale}\n        style={{ fill: planet.colors.main }}\n      /> \n    </a.g>;\n  });\n\n  // Fade out intro screen\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setPlanetZoom(true);\n    }, 10000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <a.g opacity={sceneExitSpring.opacity}>\n\n      {/* Sun */}\n      <a.circle\n        cx={CANVAS_WIDTH / 2}\n        cy={CANVAS_HEIGHT / 2}\n        r={50 * scale}\n        style={{ fill: '#f0f067' }}\n        opacity={sunSpring.opacity}  \n      />\n\n      {/* Other Planets */}\n      {renderedPlanets}\n\n      <a.text\n        x='50%'\n        y='50%'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        style={{ fontSize: '80px', fill: planet.introConfig.textColor }}\n        opacity={planetTextSpring.opacity}\n      >\n        {planet.name}\n      </a.text>\n    </a.g>\n  );\n}","import { CANVAS_HEIGHT, CANVAS_WIDTH } from '../game/constants';\n\nconst PADDING = 15;\nconst CIRCLE_RADIUS = 20;\n\nexport default ({ planet, completedMissions }) => {\n  return (\n    <g>\n      <text\n        textAnchor='end'\n        dominantBaseline='hanging'\n        x={CANVAS_WIDTH - PADDING}\n        y={PADDING}\n        style={{ fill: planet.colors.text, fontSize: '24px' }}\n      >\n        {planet.name}\n      </text>\n\n      {planet.missions.map((mission, i) => {\n        return (\n          <circle\n            key={i}\n            cx={PADDING + CIRCLE_RADIUS + (CIRCLE_RADIUS * 2 + PADDING) * i}\n            cy={PADDING + CIRCLE_RADIUS}\n            r={CIRCLE_RADIUS}\n            style={{\n                fill: completedMissions > i ? planet.colors.main : 'rgba(0, 0, 0, 0)',\n                stroke: planet.colors.main,\n                strokeWidth: completedMissions > i ? 0 : 1\n            }}\n          />\n        )\n      })}\n    </g>\n  )\n};","import { useState, useEffect } from 'react';\nimport { useSpring, animated as a } from 'react-spring';\n\nimport { Item } from './Item';\n\nimport { getMissionLabel, logEvent } from '../analytics';\nimport { BLOCK_NAMES } from '../game/blocks';\nimport { PLANETS } from '../game/missions';\nimport { obj_y } from '../game/objects';\n\nconst AItem = a(Item);\n\nexport default ({ currentInstruction, planetIndex, missionIndex,\n                  onSuccess, onFailure,\n                  setCurrentInstruction, program, programSubmitted }) => {\n\n  const planet = PLANETS[planetIndex];\n  const mission = planet.missions[missionIndex];\n\n  useEffect(() => {\n    logEvent({\n      category: 'Level',\n      action: 'Start Level',\n      label: getMissionLabel(planetIndex, missionIndex)\n    });\n  }, []);\n\n  const [startTime, setStartTime] = useState(new Date());\n  const [instructionsCompleted, setInstructionsCompleted] = useState(0);\n  const [items, setItems] = useState(mission.items);\n  const [winMessage, setWinMessage] = useState(false);\n  const [loseMessage, setLoseMessage] = useState(false);\n\n  // Check if level is won\n  function checkWin() {\n    for (let i = 0; i < mission.criteria.length; i++) {\n      if (!checkCriteria(mission.criteria[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Check if particular criteria is true\n  function checkCriteria(criterion) {\n    switch (criterion.category) {\n      \n      // Confirm x location of rover\n      case 'rover_x':\n        if (criterion.value === items.rover.x) {\n          return true;\n        }\n        return false;\n        break;\n\n      default:\n        console.log('Error: Unknown criterion.');\n        return false;\n    }\n\n  }\n\n  // Run an instruction\n  if (programSubmitted && currentInstruction < program.length && instructionsCompleted == currentInstruction) {\n    const instruction = program[currentInstruction];\n    \n    // Decide which instruction to use\n    switch (instruction) {\n\n      // Move the rover forward\n      case BLOCK_NAMES.FORWARD:\n        setInstructionsCompleted(x => x + 1);\n        setItems(items => {\n          const rover = items['rover'];\n          return {\n            ...items,\n            rover: {\n              ...rover,\n              x: rover.x + 100,\n              prev: {\n                x: rover.x + 100\n              }\n            }\n          }\n        });\n        break;\n\n      default:\n        console.log('ERROR: Unknown block.');\n    }\n}\n\nconst winSpring = useSpring({\n  to: {opacity: winMessage ? 1 : 0},\n  from: {opacity: 0},\n  config: {duration: 1000},\n  delay: 500,\n  onRest: () => {\n    if (winMessage) {\n      logEvent({\n        category: 'Level',\n        action: 'Win Level',\n        label: getMissionLabel(planetIndex, missionIndex),\n        value: Math.round((new Date() - startTime) / 1000)\n      });\n      setTimeout(() => {\n        onSuccess();\n      }, 2500);\n    }\n  }\n});\n\nconst loseSpring = useSpring({\n  to: {opacity: loseMessage ? 1 : 0},\n  from: {opacity: 0},\n  config: {duration: 1000},\n  delay: 500,\n  onRest: () => {\n    if (loseMessage) {\n      logEvent({\n        category: 'Level',\n        action: 'Lose Level',\n        label: getMissionLabel(planetIndex, missionIndex),\n        value: Math.round((new Date() - startTime) / 1000)\n      });\n      setTimeout(() => {\n        onFailure();\n      }, 2500);\n    }\n  }\n});\n\nreturn (\n    <g>\n      {Object.keys(items).map((itemName, i) => {\n\n        const item = items[itemName];\n\n        const itemSpring = useSpring({\n          to: {x: item.x, elevation: item.elevation || 0},\n          from: {\n            x: (item.prev && item.prev.x) ? item.prev.x : item.x,\n            elevation: (item.prev && item.prev.elevation) ? item.prev.elevation : item.elevation || 0\n          },\n          config: {duration: 1000},\n          onRest: () => {\n            \n            if (itemName === 'rover' && programSubmitted && instructionsCompleted === program.length) {\n              if (checkWin()) {\n                setWinMessage(true); \n              } else {\n                setLoseMessage(true);\n              }\n            }\n\n            // When rover completes its action, move on to the next instruction\n            if (itemName === 'rover' && programSubmitted\n                && instructionsCompleted > currentInstruction\n                && instructionsCompleted != program.length) {\n              setTimeout(() => {\n                setCurrentInstruction(currentInstruction + 1);\n\n\n              }, 250);\n            }\n          }\n        });\n\n        // Non-agent doesn't need to move\n        return <AItem\n          key={i}\n          object={item.object}\n          x={itemSpring.x}\n          y={itemSpring.elevation.interpolate(e => obj_y(item.object, e))}\n        /> \n      })}\n      <a.text\n        x='50%'\n        y='20%'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        opacity={winSpring.opacity}\n        style={{ fontSize: '80px', fill: planet.colors.text }}\n      >\n        Mission Success\n      </a.text>\n      <a.text\n        x='50%'\n        y='20%'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        opacity={loseSpring.opacity}\n        style={{ fontSize: '80px', fill: planet.colors.text }}\n      >\n        Try Again\n      </a.text>\n    </g>\n  );\n}","export const Item = ({object, x, y, center}) => {\n  return (\n    <image\n      href={object.image}\n      height={object.height}\n      x={center === false ? x : x - (object.width / 2)}\n      y={y}\n    />\n  )\n}","export default ({ missionNumber, objective }) => {\n  return (\n    <div style={{ fontSize: '24px', textAlign: 'center' }}>\n      <strong>Mission {missionNumber} Objective</strong>\n      <br/>\n      {objective}\n    </div>\n  );\n}","export default ({ briefing, onCompleteBriefing }) => {\n  return (\n    <div style={{ fontSize: '24px', textAlign: 'center' }}>\n      {briefing}\n      <br/>\n      <button onClick={onCompleteBriefing}>Continue</button>\n    </div>\n  );\n}","import React, { useReducer } from 'react';\nimport { useSpring, animated as a } from 'react-spring';\n\nimport ControlPanel from './ControlPanel';\nimport GameIntro from './GameIntro';\nimport Ground from './Ground';\nimport PlanetIntro from './PlanetIntro';\nimport ProgressIndicator from './ProgressIndicator';\nimport Level from './Level';\nimport MissionObjective from './MissionObjective';\nimport MissionBriefing from './MissionBriefing';\n\nimport { PLANETS } from '../game/missions';\nimport { CANVAS_WIDTH, CANVAS_HEIGHT, GROUND_HEIGHT } from '../game/constants';\nimport { remaining_blocks } from '../game/blocks';\n\n// Skip certain sequences\nconst DEV_MODE = false;\n\nconst ACTION = {\n\n  // Intro screens\n  COMPLETE_INTRO: 'COMPLETE_INTRO',\n  COMPLETE_PLANET_INTRO: 'COMPLETE_PLANET_INTRO',\n  ZOOM_PLANET_INTRO: 'ZOOM_PLANET_INTRO',\n  COMPLETE_BRIEFING: 'COMPLETE_BRIEFING',\n\n  // Program actions\n  ADD_TO_PROGRAM: 'ADD_TO_PROGRAM',\n  RESET_PROGRAM: 'RESET_PROGRAM',\n  SUBMIT_PROGRAM: 'SUBMIT_PROGRAM',\n  SET_INST_PTR: 'SET_INST_PTR',\n\n  // Changing missions\n  NEXT_MISSION: 'NEXT_MISSION',\n  REPEAT_MISSION: 'REPEAT_MISSION'\n}\n\nconst HANDLER = {\n\n  // Intro screens\n  [ACTION.COMPLETE_INTRO]: state => {\n    return {...state, introShown: true};\n  },\n  [ACTION.ZOOM_PLANET_INTRO]: state => {\n    if (state.planetIntroStatus === PLANET_INTRO_STATUS.NOT_SHOWN) {\n      return {...state, planetIntroStatus: PLANET_INTRO_STATUS.ZOOMING}\n    } else {\n      return state;\n    }\n  },\n  [ACTION.COMPLETE_PLANET_INTRO]: state => {\n    return {...state, planetIntroStatus: PLANET_INTRO_STATUS.COMPLETE}\n  },\n  [ACTION.COMPLETE_BRIEFING]: state => {\n    return {...state, briefingShown: true}\n  },\n\n  // Program actions\n  [ACTION.ADD_TO_PROGRAM]: (state, block) => {\n    return {...state, program: [...state.program, block]}\n  },\n  [ACTION.RESET_PROGRAM]: state => {\n    return {...state, program: []}\n  },\n  [ACTION.SUBMIT_PROGRAM]: state => {\n    return {...state, programSubmitted: true}\n  },\n  [ACTION.SET_INST_PTR]: (state, instruction) => {\n    return {...state, currentInstruction: instruction}\n  },\n\n  // Changing missions\n  [ACTION.NEXT_MISSION]: (state) => {\n    const planet = PLANETS[state.planetIndex];\n\n    // Next mission on this planet\n    if (state.missionIndex + 1 < planet.missions.length) {\n      return {\n        ...state,\n        missionIndex: state.missionIndex + 1,\n        round: state.round + 1,\n        program: [],\n        programSubmitted: false,\n        currentInstruction: 0\n      }\n\n    // Next mission takes us to a new planet\n    } else if (state.planetIndex + 1 < PLANETS.length) {\n      return {\n        ...state,\n        planetIndex: state.planetIndex + 1,\n        missionIndex: 0,\n        round: state.round + 1,\n        planetIntroShown: false,\n        briefingShown: false,\n        program: [],\n        programSubmitted: false,\n        currentInstruction: 0\n      }\n    \n    // No more levels\n    } else {\n      return {\n        ...state,\n        done: true\n      }\n    }\n  },\n\n  [ACTION.REPEAT_MISSION]: (state) => {\n    return {\n      ...state,\n      round: state.round + 1,\n      program: [],\n      programSubmitted: false,\n      currentInstruction: 0\n    }\n  }\n};\n\n// Keeps track of current position in planet intro\nconst PLANET_INTRO_STATUS = {\n  NOT_SHOWN: 0,\n  ZOOMING: 1,\n  COMPLETE: 2\n};\n\nconst reducer = (state, { type, payload }) => {\n  const handler = HANDLER[type];\n  if (!handler) return state;\n  return handler(state, payload);\n};\n\n// Returns initial state. Includes devellopment flag for skipping parts.\nconst getInitialState = (development) => {\n\n  return {\n\n    // Track current mission for user\n    planetIndex: 0,\n    missionIndex: 0,\n    done: false,\n    round: 0,\n\n    // Track current status of game\n    introShown: development ? true : false,\n    planetIntroStatus: development ? PLANET_INTRO_STATUS.COMPLETE: PLANET_INTRO_STATUS.NOT_SHOWN,\n    briefingShown: development ? true : false,\n\n    // Current sequence of blocks\n    program: [],\n    programSubmitted: false,\n    currentInstruction: 0\n\n  }\n}\n\nexport default (props) => {\n\n  const { onStartPlaying } = props;\n\n  const [state, dispatch] = useReducer(reducer, getInitialState(DEV_MODE));\n  const act = (type, payload) => dispatch({ type, payload });\n\n  const {\n    planetIndex,\n    missionIndex,\n    introShown,\n    planetIntroStatus,\n    briefingShown,\n    program,\n    programSubmitted,\n    round,\n    currentInstruction,\n    done\n  } = state;\n\n  const planet = PLANETS[planetIndex];\n  const mission = planet.missions[missionIndex];\n\n  // Handle entering and exiting introduction screens\n  function handleCompleteIntro() {\n    act(ACTION.COMPLETE_INTRO);\n  }\n\n  function handleZoomPlanetIntro() {\n    act(ACTION.ZOOM_PLANET_INTRO);\n  }\n\n  function handleCompletePlanetIntro() {\n    act(ACTION.COMPLETE_PLANET_INTRO);\n  }\n\n  function handleCompleteBriefing() {\n    act(ACTION.COMPLETE_BRIEFING);\n  }\n\n  function addToProgram(block) {\n    act(ACTION.ADD_TO_PROGRAM, block);\n  }\n\n  function setCurrentInstruction(i) {\n    act(ACTION.SET_INST_PTR, i);\n  }\n\n  function showIntro() {\n    return <GameIntro\n      onStartPlaying={onStartPlaying}\n      onCompleteIntro={handleCompleteIntro}\n    />;\n  }\n\n  function showPlanetIntro() {\n    return <PlanetIntro\n      planetIndex={planetIndex}\n      onZoomIntro={handleZoomPlanetIntro}\n      onCompleteIntro={handleCompletePlanetIntro}\n    />\n  }\n\n  function showLevel() {\n    return <Level\n      key={round}\n      currentInstruction={currentInstruction}\n      planetIndex={planetIndex}\n      missionIndex={missionIndex}\n      onFailure={() => act(ACTION.REPEAT_MISSION)}\n      onSuccess={() => act(ACTION.NEXT_MISSION)}\n      setCurrentInstruction={setCurrentInstruction}\n      program={program}\n      programSubmitted={programSubmitted}\n    />\n  }\n\n  function showBriefing() {\n    return <MissionBriefing\n      briefing={planet.briefing}\n      onCompleteBriefing={handleCompleteBriefing}\n    />\n  }\n\n  function showGround() {\n    return <Ground\n      planet={planet}\n    />\n  }\n\n  const backgroundColorSpring = useSpring({\n    to: {color: introShown ? (\n      planetIntroStatus >= PLANET_INTRO_STATUS.ZOOMING ? planet.colors.sky : 'black'\n      ) : 'rgba(0, 0, 0, 0)'},\n    from: {color: 'rgba(0, 0, 0, 0)'},\n    config: {duration: 1500}\n  });\n\n  const levelInProgress = planetIntroStatus == PLANET_INTRO_STATUS.COMPLETE;\n  const showControlPanel = levelInProgress && briefingShown;\n\n  // Temporary game over screen\n  if (done) {\n    return <div>game over</div>;\n  }\n\n  return (\n    <div style={{ maxWidth: CANVAS_WIDTH }}>\n      <a.svg width={CANVAS_WIDTH} height={CANVAS_HEIGHT} className='scene'\n           style={{ backgroundColor: backgroundColorSpring.color }}\n      >\n\n        {/* Ground, appears when planet has been zoomed in  */}\n        {planetIntroStatus >= PLANET_INTRO_STATUS.ZOOMING && showGround()}\n\n        {levelInProgress && \n          <ProgressIndicator\n            planet={planet}\n            completedMissions={missionIndex}\n          />\n        }\n\n        {!introShown ? showIntro() : !levelInProgress ? showPlanetIntro() : showLevel()}\n      </a.svg>\n      {levelInProgress &&\n        (briefingShown ? <MissionObjective missionNumber={missionIndex + 1} objective={mission.objective} />\n        : showBriefing())\n      }\n      {showControlPanel &&\n        <ControlPanel\n          addToProgram={addToProgram}\n          blocks={remaining_blocks(mission.blocks, program)}\n          onResetProgram={() => act(ACTION.RESET_PROGRAM)}\n          onSubmitProgram={() => act(ACTION.SUBMIT_PROGRAM)}\n          program={program}\n          programSubmitted={programSubmitted}\n        />\n      }\n    </div>\n  );\n};","export default __webpack_public_path__ + \"static/media/amerika.421d9361.mp3\";","import React, { useState } from 'react';\nimport { useSpring, animated as a } from 'react-spring';\nimport Sound from 'react-sound';\n\nimport Scene from './Scene';\n\nimport backgroundMusic from '../assets/amerika.mp3';\n\nconst ASound = a(Sound);\n\nexport default () => {\n\n  const [playing, setPlaying] = useState(false);\n  const handleStartPlaying = () => setPlaying(true);\n\n  // Fade in audio\n  const audioSpring = useSpring({\n    to: {volume: playing ? 100 : 0},\n    from: {volume: 0},\n    config: {duration: 8000}\n  });\n\n  return (\n    <div className='page'>\n      <div className='scene-container'>\n        <Scene\n          onStartPlaying={handleStartPlaying}\n        />\n      </div>\n      <ASound\n        url={backgroundMusic}\n        playStatus={playing ? Sound.status.PLAYING : Sound.status.STOPPED}\n        autoLoad={true}\n        loop={true}\n        volume={audioSpring.volume}\n      />\n    </div>\n  );\n}","import Page from './components/Page';\n\nexport default Page;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport { logPageview } from './analytics';\nimport reportWebVitals from './reportWebVitals';\n\nlogPageview();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}