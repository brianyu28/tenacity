{"version":3,"sources":["game/blocks.js","components/ControlPanel.js","game/constants.js","components/GameIntro.js","components/Ground.js","assets/rocket.svg","game/objects.js","assets/rover.svg","game/missions.js","components/PlanetIntro.js","components/ProgressIndicator.js","components/Level.js","components/Item.js","components/MissionObjective.js","components/MissionBriefing.js","components/Scene.js","assets/amerika.mp3","components/Page.js","App.js","reportWebVitals.js","index.js"],"names":["BLOCK_NAMES","BLOCKS","name","remaining_blocks","blocks","program","counts","i","length","block","undefined","reduce","acc","count","addToProgram","onResetProgram","onSubmitProgram","programSubmitted","id","map","instruction","onClick","window","scrollTo","top","behavior","setTimeout","className","blockClicked","CANVAS_WIDTH","CANVAS_HEIGHT","GROUND_HEIGHT","onCompleteIntro","onStartPlaying","useState","start","setStart","titleSpring","useSpring","to","opacity","from","config","duration","onRest","completeIntro","g","x","y","dominantBaseline","textAnchor","height","width","rx","fill","style","fontSize","planet","colors","main","Array","keys","TICK_WIDTH","OBJECTS","ROVER","image","ROCKET","rocket","PLANETS","introConfig","size","scale","orbitDuration","textColor","sky","text","briefing","missions","objective","items","object","criteria","category","value","onZoomIntro","planetIndex","resetOrbit","setResetOrbit","exitIntro","setExitIntro","planetZoom","setPlanetZoom","planetText","setPlanetText","sunSpring","delay","planetOpacitySpring","planetMotionSpring","angle","Math","PI","reset","state","sceneExitSpring","planetTextSpring","renderedPlanets","slice","isLastPlanet","planetGrowthSpring","r","radius","circle","cx","cy","fillOpacity","stroke","strokeWidth","interpolate","theta","cos","sin","useEffect","timer","clearTimeout","completedMissions","mission","PADDING","AItem","a","center","href","currentInstruction","missionIndex","onSuccess","onFailure","setCurrentInstruction","instructionsCompleted","setInstructionsCompleted","setItems","winMessage","setWinMessage","loseMessage","setLoseMessage","checkCriteria","criterion","rover","console","log","prev","winSpring","loseSpring","Object","itemName","item","itemSpring","elevation","checkWin","e","obj_y","missionNumber","textAlign","onCompleteBriefing","ACTION","HANDLER","introShown","planetIntroStatus","PLANET_INTRO_STATUS","NOT_SHOWN","ZOOMING","COMPLETE","briefingShown","round","planetIntroShown","done","reducer","type","payload","handler","props","development","useReducer","dispatch","act","handleCompleteIntro","handleZoomPlanetIntro","handleCompletePlanetIntro","handleCompleteBriefing","backgroundColorSpring","color","levelInProgress","showControlPanel","maxWidth","svg","backgroundColor","Ground","ProgressIndicator","Level","PlanetIntro","MissionObjective","MissionBriefing","ControlPanel","ASound","Sound","Page","playing","setPlaying","audioSpring","volume","Scene","url","backgroundMusic","playStatus","status","PLAYING","STOPPED","autoLoad","loop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TagManager","initialize","gtmId","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.65f085d4.chunk.js","sourcesContent":["// Blocks available for usage\n\nexport const BLOCK_NAMES = {\n  FORWARD: 'FORWARD'\n}\n\nexport const BLOCKS = {\n\n  [BLOCK_NAMES.FORWARD]: {\n    name: 'Move Forward'\n  }\n\n}\n\nexport const remaining_blocks = (blocks, program) => {\n\n  // Count up how many times each block is currently used in the program\n  const counts = {};\n  for (let i = 0; i < program.length; i++) {\n    const block = program[i];\n    if (counts[block] === undefined) {\n      counts[block] = 1;\n    } else {\n      counts[block]++;\n    }\n  }\n\n  // Remove\n  return blocks.reduce((acc, [block, count]) => (\n    [...acc, [block, count - (counts[block] || 0)]]\n  ), []);\n}","import { BLOCKS } from '../game/blocks';\n\nexport default ({ addToProgram, blocks, onResetProgram, onSubmitProgram,\n                  program, programSubmitted }) => {\n\n  function blockClicked(block) {\n    if (!programSubmitted) {\n      addToProgram(block);\n    }\n  }\n\n  function submitProgram() {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n    setTimeout(onSubmitProgram, 1000);\n  }\n\n  return (\n    <div id='control-panel'>\n      <div id='control-panel-container'>\n        <div>\n          <div id='program'>\n            {program.map((instruction, i) => {\n              return <div key={i}>\n                {BLOCKS[instruction].name}\n              </div>\n            })}\n          </div>\n          {!programSubmitted &&\n          <div>\n            <button onClick={onResetProgram}>Reset</button>\n            <button onClick={submitProgram}>Submit Instructions</button>\n          </div>\n          }\n        </div>\n        <div id='blocks'>\n          {blocks.map(([block, count], i) => {\n            if (count == 0)\n              return;\n            return <button\n              className='block'\n              key={i}\n              onClick={() => blockClicked(block)}\n            >\n              {BLOCKS[block].name} (x{count})\n            </button>\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}","// Game dimensions\nexport const CANVAS_WIDTH = 800;\nexport const CANVAS_HEIGHT = 600;\nexport const GROUND_HEIGHT = 100;\n","import { useState } from 'react';\nimport { useSpring, animated as a } from 'react-spring';\n\nimport { CANVAS_HEIGHT, CANVAS_WIDTH } from '../game/constants';\nimport '../css/GameIntro.css';\n\nconst BUTTON_WIDTH = 200;\nconst BUTTON_HEIGHT = 80;\n\nexport default ({ onCompleteIntro, onStartPlaying }) => {\n\n  // State to keep track of whether play button has been clicked\n  const [start, setStart] = useState(false);\n\n  // Fade in and fade out for titles\n  const titleSpring = useSpring({\n    to: {opacity: start ? 0 : 1},\n    from: {opacity: 0},\n    config: {duration: 1500},\n    onRest: () => {\n      if (start)\n        onCompleteIntro();\n    }\n  });\n\n  // Start playing music and begin game\n  const completeIntro = () => {\n    onStartPlaying();\n    setStart(true);\n  };\n\n  return (\n    <a.g opacity={titleSpring.opacity}>\n\n      {/* Main title */}\n      <text\n        x='50%'\n        y='30%'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        className='titleText'\n        opacity={titleSpring.opacity}\n      >\n        Tenacity\n      </text>\n\n      {/* Subtitle */}\n      <text\n        x='50%'\n        y='45%'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        className='subheadText'\n        opacity={titleSpring.opacity}\n      >\n        A game by Brian Yu\n      </text>\n\n      {/* Play button */}\n      <rect\n        x={(CANVAS_WIDTH - BUTTON_WIDTH) / 2}\n        y='360'\n        height={BUTTON_HEIGHT}\n        width={BUTTON_WIDTH}\n        rx={20}\n        fill='white'\n        className='hoverable'\n        onClick={completeIntro}\n      />\n      <text\n        x={CANVAS_WIDTH / 2}\n        y='400'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        style={{ fontSize: '48px', fill: 'black' }}\n        className='hoverable'\n        onClick={completeIntro}\n      >\n        Play\n      </text>\n\n    </a.g>\n  );\n}","import { CANVAS_HEIGHT, CANVAS_WIDTH, GROUND_HEIGHT } from '../game/constants';\n\nconst SHOW_TICKS = true;\nconst TICK_INTERVAL = 100;\nconst TICK_WIDTH = 1;\nconst TICK_HEIGHT = 10;\n\nexport default ({ planet }) => {\n  return (\n    <g>\n      <rect\n        x={0} y={CANVAS_HEIGHT - GROUND_HEIGHT} width={CANVAS_WIDTH} height={GROUND_HEIGHT}\n        fill={planet.colors.main}\n      />\n      {SHOW_TICKS && [...Array(CANVAS_WIDTH / TICK_INTERVAL).keys()].map(i => {\n        return <rect\n          key={i}\n          x={i * TICK_INTERVAL - (TICK_WIDTH / 2)}\n          y={CANVAS_HEIGHT - GROUND_HEIGHT}\n          width={TICK_WIDTH}\n          height={TICK_HEIGHT}\n        />\n      })}\n    </g>\n  );\n}","export default __webpack_public_path__ + \"static/media/rocket.0dec99f9.svg\";","import rocket from '../assets/rocket.svg';\nimport rover from '../assets/rover.svg';\n\nimport { CANVAS_HEIGHT, GROUND_HEIGHT } from './constants';\n\nexport const OBJECTS = {\n  ROVER: {\n    image: rover,\n    height: 80,\n    width: 80\n  },\n  ROCKET: {\n    image: rocket,\n    height: 100,\n    width: 57\n  }\n}\n\n// Get y position of object based on its elevation off the ground\nexport const obj_y = (object, elevation = 0) => (\n  CANVAS_HEIGHT - GROUND_HEIGHT - object.height - elevation \n)","export default __webpack_public_path__ + \"static/media/rover.b107911f.svg\";","// Game is divided into Planets and Missions\n\nimport { BLOCK_NAMES } from './blocks';\nimport { OBJECTS } from './objects';\n\nexport const PLANETS = [\n  {\n    name: 'Mercury',\n    introConfig: {\n      size: 15,\n      scale: 2,\n      orbitDuration: 10000,\n      textColor: 'black'\n    },\n    colors: {\n      main: '#ae7c43',\n      sky: '#dbb78f',\n      text: 'black'\n    },\n    briefing: 'The Tenacity rover has arrived on Mercury. Use the control panel to help Tenacity complete its missions.',\n    missions: [\n      {\n        objective: 'Navigate Tenacity back to the spacecraft for refueling.',\n        blocks: [\n          [BLOCK_NAMES.FORWARD, 2]\n        ],\n        items: {\n          'rocket': {object: OBJECTS.ROCKET, x: 500},\n          'rover': {object: OBJECTS.ROVER, x: 300},\n        },\n        criteria: [\n          {category: 'rover_x', value: 500}\n        ]\n      },\n      {\n        objective: 'This Mission has yet to be created. Check back soon!',\n        blocks: [],\n        items: {},\n        criteria: []\n      }\n    ]\n  },\n  {\n    name: 'Venus'\n  }\n]","import { useState, useEffect } from 'react';\nimport { useSpring, animated as a } from 'react-spring';\n\nimport { CANVAS_HEIGHT, CANVAS_WIDTH } from '../game/constants';\nimport { PLANETS } from '../game/missions';\n\nconst START_RADIUS = 100;\nconst RADIUS_INCREMENT = 20;\n\nexport default ({ onCompleteIntro, onZoomIntro, planetIndex }) => {\n\n  // Determine current planet and scale\n  const planet = PLANETS[planetIndex];\n  const scale = planet.introConfig.scale;\n\n  // State to keep track of stage in animation\n  const [resetOrbit, setResetOrbit] = useState(false);\n  const [exitIntro, setExitIntro] = useState(false);\n  const [planetZoom, setPlanetZoom] = useState(false);\n  const [planetText, setPlanetText] = useState(false);\n\n  // Fade in for sun\n  const sunSpring = useSpring({\n    to: {opacity: 1},\n    from: {opacity: 0},\n    config: {duration: 1500},\n    delay: 1500,\n  });\n\n  // Fade in for planets\n  const planetOpacitySpring = useSpring({\n    to: {opacity: 1},\n    from: {opacity: 0},\n    config: {duration: 1500},\n    delay: 3000\n  })\n\n  // Angle for planets' orbit\n  const planetMotionSpring = useSpring({\n    to: {angle: 2 * Math.PI},\n    from: {angle: 0},\n    config: {duration: 10000},\n    reset: resetOrbit,\n    onRest: () => setResetOrbit(state => !state)\n  });\n\n  // Fade out for scene\n  const sceneExitSpring = useSpring({\n    to: {opacity: exitIntro ? 0: 1},\n    from: {opacity: 1},\n    config: {duration: 2000},\n    onRest: () => {\n      if (exitIntro) {\n        onCompleteIntro();\n      }\n    }\n  });\n\n  // Fade in for planet text\n  const planetTextSpring = useSpring({\n    to: {opacity: planetText ? 1: 0},\n    from: {opacity: 0},\n    config: {duration: 1000},\n    onRest: () => {\n      if (planetText) {\n        setTimeout(() => {\n          setExitIntro(true);\n        }, 2000);\n      }\n    }\n  })\n\n  // Generate orbit and planet for each visible planet\n  const renderedPlanets = PLANETS.slice(0, 1 + planetIndex).map((planet, i) => {\n\n    const isLastPlanet = i == planetIndex;\n\n    let planetGrowthSpring = undefined;\n    if (isLastPlanet) {\n      planetGrowthSpring = useSpring({\n        to: {r: planetZoom ? 1600 : planet.introConfig.size * scale},\n        from: {r: planet.introConfig.size * scale},\n        config: {duration: 1000},\n        onRest: () => {\n          if (planetZoom) {\n            onZoomIntro();\n            setPlanetText(true);\n          }\n        }\n      });\n    }\n\n    const radius = START_RADIUS + RADIUS_INCREMENT * i;\n    return <a.g key={i} opacity={planetOpacitySpring.opacity}>\n      <a.circle\n        cx={CANVAS_WIDTH / 2}\n        cy={CANVAS_HEIGHT / 2}\n        r={radius * scale}\n        fillOpacity={0}\n        stroke={'white'}\n        strokeWidth={2}\n      />\n      <a.circle\n        cx={planetMotionSpring.angle.interpolate(theta => (CANVAS_WIDTH / 2) + scale * (radius * Math.cos(theta)))}\n        cy={planetMotionSpring.angle.interpolate(theta => (CANVAS_HEIGHT / 2) - scale * (radius * Math.sin(theta)))}\n        r={isLastPlanet ? planetGrowthSpring.r : planet.introConfig.size * scale}\n        style={{ fill: planet.colors.main }}\n      /> \n    </a.g>;\n  });\n\n  // Fade out intro screen\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setPlanetZoom(true);\n    }, 10000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <a.g opacity={sceneExitSpring.opacity}>\n\n      {/* Sun */}\n      <a.circle\n        cx={CANVAS_WIDTH / 2}\n        cy={CANVAS_HEIGHT / 2}\n        r={50 * scale}\n        style={{ fill: '#f0f067' }}\n        opacity={sunSpring.opacity}  \n      />\n\n      {/* Other Planets */}\n      {renderedPlanets}\n\n      <a.text\n        x='50%'\n        y='50%'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        style={{ fontSize: '80px', fill: planet.introConfig.textColor }}\n        opacity={planetTextSpring.opacity}\n      >\n        {planet.name}\n      </a.text>\n    </a.g>\n  );\n}","import { CANVAS_HEIGHT, CANVAS_WIDTH } from '../game/constants';\n\nconst PADDING = 15;\nconst CIRCLE_RADIUS = 20;\n\nexport default ({ planet, completedMissions }) => {\n  return (\n    <g>\n      <text\n        textAnchor='end'\n        dominantBaseline='hanging'\n        x={CANVAS_WIDTH - PADDING}\n        y={PADDING}\n        style={{ fill: planet.colors.text, fontSize: '24px' }}\n      >\n        {planet.name}\n      </text>\n\n      {planet.missions.map((mission, i) => {\n        return (\n          <circle\n            key={i}\n            cx={PADDING + CIRCLE_RADIUS + (CIRCLE_RADIUS * 2 + PADDING) * i}\n            cy={PADDING + CIRCLE_RADIUS}\n            r={CIRCLE_RADIUS}\n            style={{\n                fill: completedMissions > i ? planet.colors.main : 'rgba(0, 0, 0, 0)',\n                stroke: planet.colors.main,\n                strokeWidth: completedMissions > i ? 0 : 1\n            }}\n          />\n        )\n      })}\n    </g>\n  )\n};","import { useState } from 'react';\nimport { useSpring, animated as a } from 'react-spring';\n\nimport { Item } from './Item';\n\nimport { BLOCK_NAMES } from '../game/blocks';\nimport { PLANETS } from '../game/missions';\nimport {  obj_y } from '../game/objects';\n\nconst AItem = a(Item);\n\nexport default ({ currentInstruction, planetIndex, missionIndex,\n                  onSuccess, onFailure,\n                  setCurrentInstruction, program, programSubmitted }) => {\n\n  const planet = PLANETS[planetIndex];\n  const mission = planet.missions[missionIndex];\n  \n  const [instructionsCompleted, setInstructionsCompleted] = useState(0);\n  const [items, setItems] = useState(mission.items);\n  const [winMessage, setWinMessage] = useState(false);\n  const [loseMessage, setLoseMessage] = useState(false);\n\n  // Check if level is won\n  function checkWin() {\n    for (let i = 0; i < mission.criteria.length; i++) {\n      if (!checkCriteria(mission.criteria[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Check if particular criteria is true\n  function checkCriteria(criterion) {\n    switch (criterion.category) {\n      \n      // Confirm x location of rover\n      case 'rover_x':\n        if (criterion.value === items.rover.x) {\n          return true;\n        }\n        return false;\n        break;\n\n      default:\n        console.log('Error: Unknown criterion.');\n        return false;\n    }\n\n  }\n\n  // Run an instruction\n  if (programSubmitted && currentInstruction < program.length && instructionsCompleted == currentInstruction) {\n    const instruction = program[currentInstruction];\n    \n    // Decide which instruction to use\n    switch (instruction) {\n\n      // Move the rover forward\n      case BLOCK_NAMES.FORWARD:\n        setInstructionsCompleted(x => x + 1);\n        setItems(items => {\n          const rover = items['rover'];\n          return {\n            ...items,\n            rover: {\n              ...rover,\n              x: rover.x + 100,\n              prev: {\n                x: rover.x + 100\n              }\n            }\n          }\n        });\n        break;\n\n      default:\n        console.log('ERROR: Unknown block.');\n    }\n}\n\nconst winSpring = useSpring({\n  to: {opacity: winMessage ? 1 : 0},\n  from: {opacity: 0},\n  config: {duration: 1000},\n  delay: 500,\n  onRest: () => {\n    if (winMessage) {\n      setTimeout(() => {\n        onSuccess();\n      }, 2500);\n    }\n  }\n});\n\nconst loseSpring = useSpring({\n  to: {opacity: loseMessage ? 1 : 0},\n  from: {opacity: 0},\n  config: {duration: 1000},\n  delay: 500,\n  onRest: () => {\n    if (loseMessage) {\n      setTimeout(() => {\n        onFailure();\n      }, 2500);\n    }\n  }\n});\n\nreturn (\n    <g>\n      {Object.keys(items).map((itemName, i) => {\n\n        const item = items[itemName];\n\n        const itemSpring = useSpring({\n          to: {x: item.x, elevation: item.elevation || 0},\n          from: {\n            x: (item.prev && item.prev.x) ? item.prev.x : item.x,\n            elevation: (item.prev && item.prev.elevation) ? item.prev.elevation : item.elevation || 0\n          },\n          config: {duration: 1000},\n          onRest: () => {\n            \n            if (itemName === 'rover' && programSubmitted && instructionsCompleted === program.length) {\n              if (checkWin()) {\n                setWinMessage(true); \n              } else {\n                setLoseMessage(true);\n              }\n            }\n\n            // When rover completes its action, move on to the next instruction\n            if (itemName === 'rover' && programSubmitted\n                && instructionsCompleted > currentInstruction\n                && instructionsCompleted != program.length) {\n              setTimeout(() => {\n                setCurrentInstruction(currentInstruction + 1);\n\n\n              }, 250);\n            }\n          }\n        });\n\n        // Non-agent doesn't need to move\n        return <AItem\n          key={i}\n          object={item.object}\n          x={itemSpring.x}\n          y={itemSpring.elevation.interpolate(e => obj_y(item.object, e))}\n        /> \n      })}\n      <a.text\n        x='50%'\n        y='20%'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        opacity={winSpring.opacity}\n        style={{ fontSize: '80px', fill: planet.colors.text }}\n      >\n        Mission Success\n      </a.text>\n      <a.text\n        x='50%'\n        y='20%'\n        dominantBaseline='middle'\n        textAnchor='middle'\n        opacity={loseSpring.opacity}\n        style={{ fontSize: '80px', fill: planet.colors.text }}\n      >\n        Try Again\n      </a.text>\n    </g>\n  );\n}","export const Item = ({object, x, y, center}) => {\n  return (\n    <image\n      href={object.image}\n      height={object.height}\n      x={center === false ? x : x - (object.width / 2)}\n      y={y}\n    />\n  )\n}","export default ({ missionNumber, objective }) => {\n  return (\n    <div style={{ fontSize: '24px', textAlign: 'center' }}>\n      <strong>Mission {missionNumber} Objective</strong>\n      <br/>\n      {objective}\n    </div>\n  );\n}","export default ({ briefing, onCompleteBriefing }) => {\n  return (\n    <div style={{ fontSize: '24px', textAlign: 'center' }}>\n      {briefing}\n      <br/>\n      <button onClick={onCompleteBriefing}>Continue</button>\n    </div>\n  );\n}","import React, { useReducer } from 'react';\nimport { useSpring, animated as a } from 'react-spring';\n\nimport ControlPanel from './ControlPanel';\nimport GameIntro from './GameIntro';\nimport Ground from './Ground';\nimport PlanetIntro from './PlanetIntro';\nimport ProgressIndicator from './ProgressIndicator';\nimport Level from './Level';\nimport MissionObjective from './MissionObjective';\nimport MissionBriefing from './MissionBriefing';\n\nimport { PLANETS } from '../game/missions';\nimport { CANVAS_WIDTH, CANVAS_HEIGHT, GROUND_HEIGHT } from '../game/constants';\nimport { remaining_blocks } from '../game/blocks';\n\n// Skip certain sequences\nconst DEV_MODE = false;\n\nconst ACTION = {\n\n  // Intro screens\n  COMPLETE_INTRO: 'COMPLETE_INTRO',\n  COMPLETE_PLANET_INTRO: 'COMPLETE_PLANET_INTRO',\n  ZOOM_PLANET_INTRO: 'ZOOM_PLANET_INTRO',\n  COMPLETE_BRIEFING: 'COMPLETE_BRIEFING',\n\n  // Program actions\n  ADD_TO_PROGRAM: 'ADD_TO_PROGRAM',\n  RESET_PROGRAM: 'RESET_PROGRAM',\n  SUBMIT_PROGRAM: 'SUBMIT_PROGRAM',\n  SET_INST_PTR: 'SET_INST_PTR',\n\n  // Changing missions\n  NEXT_MISSION: 'NEXT_MISSION',\n  REPEAT_MISSION: 'REPEAT_MISSION'\n}\n\nconst HANDLER = {\n\n  // Intro screens\n  [ACTION.COMPLETE_INTRO]: state => {\n    return {...state, introShown: true};\n  },\n  [ACTION.ZOOM_PLANET_INTRO]: state => {\n    if (state.planetIntroStatus === PLANET_INTRO_STATUS.NOT_SHOWN) {\n      return {...state, planetIntroStatus: PLANET_INTRO_STATUS.ZOOMING}\n    } else {\n      return state;\n    }\n  },\n  [ACTION.COMPLETE_PLANET_INTRO]: state => {\n    return {...state, planetIntroStatus: PLANET_INTRO_STATUS.COMPLETE}\n  },\n  [ACTION.COMPLETE_BRIEFING]: state => {\n    return {...state, briefingShown: true}\n  },\n\n  // Program actions\n  [ACTION.ADD_TO_PROGRAM]: (state, block) => {\n    return {...state, program: [...state.program, block]}\n  },\n  [ACTION.RESET_PROGRAM]: state => {\n    return {...state, program: []}\n  },\n  [ACTION.SUBMIT_PROGRAM]: state => {\n    return {...state, programSubmitted: true}\n  },\n  [ACTION.SET_INST_PTR]: (state, instruction) => {\n    return {...state, currentInstruction: instruction}\n  },\n\n  // Changing missions\n  [ACTION.NEXT_MISSION]: (state) => {\n    const planet = PLANETS[state.planetIndex];\n\n    // Next mission on this planet\n    if (state.missionIndex + 1 < planet.missions.length) {\n      return {\n        ...state,\n        missionIndex: state.missionIndex + 1,\n        round: state.round + 1,\n        program: [],\n        programSubmitted: false,\n        currentInstruction: 0\n      }\n\n    // Next mission takes us to a new planet\n    } else if (state.planetIndex + 1 < PLANETS.length) {\n      return {\n        ...state,\n        planetIndex: state.planetIndex + 1,\n        missionIndex: 0,\n        round: state.round + 1,\n        planetIntroShown: false,\n        briefingShown: false,\n        program: [],\n        programSubmitted: false,\n        currentInstruction: 0\n      }\n    \n    // No more levels\n    } else {\n      return {\n        ...state,\n        done: true\n      }\n    }\n  },\n\n  [ACTION.REPEAT_MISSION]: (state) => {\n    return {\n      ...state,\n      round: state.round + 1,\n      program: [],\n      programSubmitted: false,\n      currentInstruction: 0\n    }\n  }\n};\n\n// Keeps track of current position in planet intro\nconst PLANET_INTRO_STATUS = {\n  NOT_SHOWN: 0,\n  ZOOMING: 1,\n  COMPLETE: 2\n};\n\nconst reducer = (state, { type, payload }) => {\n  const handler = HANDLER[type];\n  if (!handler) return state;\n  return handler(state, payload);\n};\n\n// Returns initial state. Includes devellopment flag for skipping parts.\nconst getInitialState = (development) => {\n\n  return {\n\n    // Track current mission for user\n    planetIndex: 0,\n    missionIndex: 0,\n    done: false,\n    round: 0,\n\n    // Track current status of game\n    introShown: development ? true : false,\n    planetIntroStatus: development ? PLANET_INTRO_STATUS.COMPLETE: PLANET_INTRO_STATUS.NOT_SHOWN,\n    briefingShown: development ? true : false,\n\n    // Current sequence of blocks\n    program: [],\n    programSubmitted: false,\n    currentInstruction: 0\n\n  }\n}\n\nexport default (props) => {\n\n  const { onStartPlaying } = props;\n\n  const [state, dispatch] = useReducer(reducer, getInitialState(DEV_MODE));\n  const act = (type, payload) => dispatch({ type, payload });\n\n  const {\n    planetIndex,\n    missionIndex,\n    introShown,\n    planetIntroStatus,\n    briefingShown,\n    program,\n    programSubmitted,\n    round,\n    currentInstruction,\n    done\n  } = state;\n\n  const planet = PLANETS[planetIndex];\n  const mission = planet.missions[missionIndex];\n\n  // Handle entering and exiting introduction screens\n  function handleCompleteIntro() {\n    act(ACTION.COMPLETE_INTRO);\n  }\n\n  function handleZoomPlanetIntro() {\n    act(ACTION.ZOOM_PLANET_INTRO);\n  }\n\n  function handleCompletePlanetIntro() {\n    act(ACTION.COMPLETE_PLANET_INTRO);\n  }\n\n  function handleCompleteBriefing() {\n    act(ACTION.COMPLETE_BRIEFING);\n  }\n\n  function addToProgram(block) {\n    act(ACTION.ADD_TO_PROGRAM, block);\n  }\n\n  function setCurrentInstruction(i) {\n    act(ACTION.SET_INST_PTR, i);\n  }\n\n  function showIntro() {\n    return <GameIntro\n      onStartPlaying={onStartPlaying}\n      onCompleteIntro={handleCompleteIntro}\n    />;\n  }\n\n  function showPlanetIntro() {\n    return <PlanetIntro\n      planetIndex={planetIndex}\n      onZoomIntro={handleZoomPlanetIntro}\n      onCompleteIntro={handleCompletePlanetIntro}\n    />\n  }\n\n  function showLevel() {\n    return <Level\n      key={round}\n      currentInstruction={currentInstruction}\n      planetIndex={planetIndex}\n      missionIndex={missionIndex}\n      onFailure={() => act(ACTION.REPEAT_MISSION)}\n      onSuccess={() => act(ACTION.NEXT_MISSION)}\n      setCurrentInstruction={setCurrentInstruction}\n      program={program}\n      programSubmitted={programSubmitted}\n    />\n  }\n\n  function showBriefing() {\n    return <MissionBriefing\n      briefing={planet.briefing}\n      onCompleteBriefing={handleCompleteBriefing}\n    />\n  }\n\n  function showGround() {\n    return <Ground\n      planet={planet}\n    />\n  }\n\n  const backgroundColorSpring = useSpring({\n    to: {color: introShown ? (\n      planetIntroStatus >= PLANET_INTRO_STATUS.ZOOMING ? planet.colors.sky : 'black'\n      ) : 'rgba(0, 0, 0, 0)'},\n    from: {color: 'rgba(0, 0, 0, 0)'},\n    config: {duration: 1500}\n  });\n\n  const levelInProgress = planetIntroStatus == PLANET_INTRO_STATUS.COMPLETE;\n  const showControlPanel = levelInProgress && briefingShown;\n\n  // Temporary game over screen\n  if (done) {\n    return <div>game over</div>;\n  }\n\n  return (\n    <div style={{ maxWidth: CANVAS_WIDTH }}>\n      <a.svg width={CANVAS_WIDTH} height={CANVAS_HEIGHT} className='scene'\n           style={{ backgroundColor: backgroundColorSpring.color }}\n      >\n\n        {/* Ground, appears when planet has been zoomed in  */}\n        {planetIntroStatus >= PLANET_INTRO_STATUS.ZOOMING && showGround()}\n\n        {levelInProgress && \n          <ProgressIndicator\n            planet={planet}\n            completedMissions={missionIndex}\n          />\n        }\n\n        {!introShown ? showIntro() : !levelInProgress ? showPlanetIntro() : showLevel()}\n      </a.svg>\n      {levelInProgress &&\n        (briefingShown ? <MissionObjective missionNumber={missionIndex + 1} objective={mission.objective} />\n        : showBriefing())\n      }\n      {showControlPanel &&\n        <ControlPanel\n          addToProgram={addToProgram}\n          blocks={remaining_blocks(mission.blocks, program)}\n          onResetProgram={() => act(ACTION.RESET_PROGRAM)}\n          onSubmitProgram={() => act(ACTION.SUBMIT_PROGRAM)}\n          program={program}\n          programSubmitted={programSubmitted}\n        />\n      }\n    </div>\n  );\n};","export default __webpack_public_path__ + \"static/media/amerika.421d9361.mp3\";","import React, { useState } from 'react';\nimport { useSpring, animated as a } from 'react-spring';\nimport Sound from 'react-sound';\n\nimport Scene from './Scene';\n\nimport backgroundMusic from '../assets/amerika.mp3';\n\nconst ASound = a(Sound);\n\nexport default () => {\n\n  const [playing, setPlaying] = useState(false);\n  const handleStartPlaying = () => setPlaying(true);\n\n  // Fade in audio\n  const audioSpring = useSpring({\n    to: {volume: playing ? 100 : 0},\n    from: {volume: 0},\n    config: {duration: 8000}\n  });\n\n  return (\n    <div className='page'>\n      <div className='scene-container'>\n        <Scene\n          onStartPlaying={handleStartPlaying}\n        />\n      </div>\n      <ASound\n        url={backgroundMusic}\n        playStatus={playing ? Sound.status.PLAYING : Sound.status.STOPPED}\n        autoLoad={true}\n        loop={true}\n        volume={audioSpring.volume}\n      />\n    </div>\n  );\n}","import Page from './components/Page';\n\nexport default Page;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TagManager from 'react-gtm-module';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst tagManagerArgs = {\n  gtmId: 'G-NZ8LEP7MN2'\n}\nTagManager.initialize(tagManagerArgs);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}